Step 1: Install Nodejs in the system as npm (Node Package Manager) is required to do the setup/skeleton for playwright automation

Step 2: Take the Nodejs path installed in the "Program Files" and add it to environmental variables path so the automation recognizes the Nodejs

Step 3: npm init playwright - This is the first step where we create a playwright automation modules

--->Questions:

1. Do you want to use TypeScript or JavaScript? - JavaScript (As TypeScript does not have much difference compared to JavaScript)
2. Where to put your end-to-end tests? - tests (This is the default path to put the tests which is fine)
3. Add a GitHub Actions workflow? - true
4. Install Playwright browsers (can be done manually via 'npx playwright install')? - true (This will add all the browser calls default during module setup)

---> .github - This is the GitHub workflow folder created by playwright as we mentioned true for the Question

---> node_modules

1. This folder contains all the jars installed by playwright to run the automation
2. Playwright will not work post deleting this folder

---> test

1. This folder contains all the test scripts we need to write to perform automation

---> tests-examples

1. This folder contains some examples of test cases that playwright has auto-generated

---> playwright.config.js

1. Important file which handles browser invokation, wait time etc.
2. Test runner file which is used to run the test scripts written under test folder

---> package.json:

1. Dependencies and versions will be added 

---> Important Commands:

Inside that directory, you can run several commands:

  npx playwright test
    Runs the end-to-end tests.

  npx playwright test --ui
    Starts the interactive UI mode.

  npx playwright test --project=chromium
    Runs the tests only on Desktop Chrome.

  npx playwright test example
    Runs the tests in a specific file.

  npx playwright test --debug
    Runs the tests in debug mode.

  npx playwright codegen
    Auto generate tests with Codegen.

We suggest that you begin by typing:

    npx playwright test

Locators Syntax:

Playwright supports only CSS selectors:

----> If ID is present:

--> tagname#id or #id

----> If Class attribute is present

--> tagname.class or .class

----> CSS based on any attribute

--> [attribute = 'value']

----> CSS traversing from parent to child

--> parenttagname >> childtagname

---> Points to be Noted:

--> const {test} = require('@playwright/test'); //Importing this annotation from jar

--> //The below function will be recognized by playwright only if the above annotation is imported
test('First Playwright Automation Test', async function(){
    //Playwright automation code will go here
});

--> JavaScript is a asynchronous language where it will not follow any defined steps to execute the code unlike other programming languages

--> await - This is to inform JavaScript to wait until the step is done as JavaScript is asynchronous

--> async should be added to the function otherwise await has no use in it

--> From latest version of JavaScript if the function does not have name it is called as anonymous function and hence it can be written as below:

test('First Playwright Automation Test', async ()=>{
    //Playwright automation code will go here
});

--> {browser} - is a fixture to inform playwright to invoke the browser and it is passed as a parameter

-> Since it need to be recognized as playwright fixtures it is enclosed in curly braces

--> When we open a browser the cookies and extensions will be there.

-> const context = await browser.newContext(); // Browser info will be mentioned in config file

-> If it is given as newContext() it is like opening the browser in incognito mode

-> If need to inject cookies or proxies then it can be sent as parameter in newContext() - Showed later in notes

--> Default PlayWright runs in headless mode

--> test("Page PlayWright test", async ({ page }) => {})

-> When given like this playwright automatically understands that the browser to be opened without any cookies

--> npx playwright test --headed - This command is used to run in headed mode

--> This is also mentioned in config.js file

playwright.config.js:

--> const config = {} - config object is getting created

--> testDir: "./tests", - Mentioning the directory where the test files are written

--> timeout: 30 * 1000, - How much time the tool should wait until it throws error

--> expect: {
    timeout: 5000,
  },

-> This is primarily used for assertions

--> use: {} - test cases will read this property and based on that tool will run

----> test.only - Should not be used for multiple functions. Instead we can run the specified file in runtime:

--> npx playwright test <filename>

----> await page.waitForLoadState("networkidle");

--> The above statement may be flaky and not work sometimes. In that case we can use:

--> await productTitle.first().waitFor();



